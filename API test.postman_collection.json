{
	"info": {
		"_postman_id": "081a9631-6820-4384-9dec-3c5314cc7344",
		"name": "API test for assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40641435",
		"_collection_link": "https://grey-trinity-623083.postman.co/workspace/SQA-trifecta~6b28241f-2b0d-4a3e-b725-ad2e3924144e/collection/40641435-081a9631-6820-4384-9dec-3c5314cc7344?action=share&source=collection_link&creator=40641435"
	},
	"item": [
		{
			"name": "GET http://127.0.0.1:5000/student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Updated test for body fields to include the required fields - title and message\r",
							"pm.test(\"Response body has the required fields - title and message\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include(\"title\");\r",
							"    pm.expect(responseData).to.include(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present and has the value 'text/html'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate HTML structure\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.include('<!doctype html>');\r",
							"    pm.expect(responseData).to.include('<html lang=en>');\r",
							"    pm.expect(responseData).to.include('<title>404 Not Found</title>');\r",
							"    pm.expect(responseData).to.include('<h1>Not Found</h1>');\r",
							"    pm.expect(responseData).to.include('<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student"
					]
				}
			},
			"response": [
				{
					"name": "GET http://127.0.0.1:5000/student",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:5000/student",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "5000",
							"path": [
								"student"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/3.1.3 Python/3.12.8"
						},
						{
							"key": "Date",
							"value": "Wed, 25 Dec 2024 07:40:04 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "1340"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"courses_passed\": [\n            \"CSE2213\",\n            \"CSE1110\",\n            \"CSE1111\",\n            \"CSE1114\",\n            \"CSE1115\",\n            \"CSE1116\",\n            \"CSE2117\",\n            \"CSE2118\",\n            \"CSE3119\",\n            \"CSE4010\"\n        ],\n        \"id\": 1,\n        \"name\": \"Abdul Jabbar\",\n        \"personnummer\": \"920223-9999\"\n    },\n    {\n        \"courses_passed\": [\n            \"CSE2213\",\n            \"CSE1110\",\n            \"CSE1111\",\n            \"CSE1114\",\n            \"CSE1115\",\n            \"CSE1116\",\n            \"CSE2117\"\n        ],\n        \"id\": 2,\n        \"name\": \"Abdel Ahmed\",\n        \"personnummer\": \"990111-9999\"\n    },\n    {\n        \"courses_passed\": [],\n        \"id\": 3,\n        \"name\": \"Joel Stevensson \",\n        \"personnummer\": \"011030-9999\"\n    },\n    {\n        \"courses_passed\": [\n            \"DSE1001\",\n            \"DSEE1002\",\n            \"DSE1003\",\n            \"DSE1004\",\n            \"DSE2105\",\n            \"DSE2116\",\n            \"DSE3217\",\n            \"DSE3218\",\n            \"DSE3239\",\n            \"DSE4100\"\n        ],\n        \"id\": 4,\n        \"name\": \"Yue Sakamoto\",\n        \"personnummer\": \"980401-9999\"\n    },\n    {\n        \"courses_passed\": [\n            \"DSE1001\",\n            \"DSE1002\",\n            \"DSE1003\",\n            \"DSE3217\"\n        ],\n        \"id\": 5,\n        \"name\": \"Ivan Faknamovich\",\n        \"personnummer\": \"951128-9999\"\n    },\n    {\n        \"courses_passed\": [\n            \"CSE2213\",\n            \"CSE1110\",\n            \"CSE1111\",\n            \"CSE1114\",\n            \"CSE1115\",\n            \"CSE1116\",\n            \"CSE2117\",\n            \"CSE2118\",\n            \"CSE3119\",\n            \"CSE4010\",\n            \"DSE1004\",\n            \"DSE2105\"\n        ],\n        \"id\": 6,\n        \"name\": \"Amy Pond\",\n        \"personnummer\": \"020201-9999\"\n    },\n    {\n        \"courses_passed\": [\n            \"CSE1115\",\n            \"CSE4010\",\n            \"DSE1001\",\n            \"DSE1002\",\n            \"DSE1003\",\n            \"DSE1004\",\n            \"DSE2105\",\n            \"DSE2116\",\n            \"DSE3217\",\n            \"DSE3218\",\n            \"DSE3239\",\n            \"DSE4100\"\n        ],\n        \"id\": 7,\n        \"name\": \"Rory Williams\",\n        \"personnummer\": \"010203-9999\"\n    },\n    {\n        \"courses_passed\": [\n            \"CSE1115\",\n            \"CSE4010\",\n            \"DSE1001\",\n            \"DSE1004\",\n            \"DSE2105\",\n            \"DSE1004\"\n        ],\n        \"id\": 8,\n        \"name\": \"Steve Rogers\",\n        \"personnummer\": \"0704-9999\"\n    },\n    {\n        \"courses_passed\": [\n            \"CSE2213\"\n        ],\n        \"id\": 9,\n        \"name\": \"Natasha Romanov\",\n        \"personnummer\": \"861231-9999\"\n    }\n]"
				}
			]
		},
		{
			"name": "http://127.0.0.1:5000/student/6",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/student/6",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"student",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
							"});\r",
							"\r",
							"// Test for specific properties in the response body\r",
							"pm.test(\"Response body has the correct properties\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"name\", \"Tanvir Mahtab\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"personnummer\", \"990101-1234\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"courses_passed\").that.is.an('array').that.includes(\"CSE1010\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Tanvir Mahtab\",\r\n    \"personnummer\": \"990102-5678\",\r\n    \"courses_passed\": [\"CSE1010\", \"CSE2020\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/create",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Updated name is correct\", function () {\r",
							"    pm.expect(pm.response.json().name).to.equal(\"Tanvir Mahtab Updated\");\r",
							"});\r",
							"\r",
							"pm.test(\"Personnummer remains unchanged\", function () {\r",
							"    pm.expect(pm.response.json().personnummer).to.equal(\"990101-1234\");\r",
							"});\r",
							"\r",
							"pm.test(\"Updated courses are correct\", function () {\r",
							"    pm.expect(pm.response.json().courses_passed).to.eql([\"CSE1010\", \"DSE2020\", \"CSE3030\"]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Tanvir Mahtab Updated\",\r\n    \"personnummer\": \"990101-1234\",  \r\n    \"courses_passed\": [\"CSE1010\", \"CSE2020\", \"CSE3030\", \"CSE4566\"] \r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/update/11",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"update",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Deleted ID is correct\", function () {\r",
							"    pm.expect(pm.response.json().deleted).to.eql(\"5\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/delete/5",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"delete",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Programs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Check programs array is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);  // Ensure there are programs returned\r",
							"});\r",
							"\r",
							"pm.test(\"Check program structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property(\"id\");\r",
							"    pm.expect(jsonData[0]).to.have.property(\"courses_required\");\r",
							"});\r",
							"pm.test(\"Check all IDs are present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/program",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"program"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Program Courses",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Graduation Status",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	]
}